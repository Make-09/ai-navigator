import os
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_KEY = os.environ.get("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_KEY) if OPENAI_KEY else None

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__, static_folder='static', static_url_path='')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è production
CORS(app, resources={
    r"/api/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type"]
    }
})

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
SYSTEM_PROMPT = """–¢—ã AI-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –∏ –∫–∞—Ä—å–µ—Ä–µ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –≤—É–∑—ã, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å.
–û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ-—Å—É—â–µ—Å—Ç–≤—É. –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É–π —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –∏—Ö –≤—ã–±–æ—Ä–µ."""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return app.send_static_file('index.html')

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "status": "ok", 
        "api_configured": client is not None,
        "openai_key_present": bool(OPENAI_KEY)
    })

@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å AI"""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if request.method == 'OPTIONS':
        return '', 204
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI API
    if not client:
        print("‚ùå ERROR: OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return jsonify({
            "error": "OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ Environment Variables –Ω–∞ Render."
        }), 503
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        
        if not data or "message" not in data:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}), 400
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_message = data["message"].strip()
        
        if not user_message:
            return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        user_message = user_message[:2000]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        chat_history = data.get("history", [])
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 15 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        if len(chat_history) > 15:
            chat_history = chat_history[-15:]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI API
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        for msg in chat_history:
            if msg.get("role") in ["user", "assistant"] and msg.get("content"):
                messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏)
        if not chat_history or chat_history[-1].get("content") != user_message:
            messages.append({"role": "user", "content": user_message})
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI (–∏—Å—Ç–æ—Ä–∏—è: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.7,
            max_tokens=1500,
            timeout=30
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        bot_reply = response.choices[0].message.content
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI ({len(bot_reply)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"üìù –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {bot_reply[:100]}")
        
        return jsonify({"reply": bot_reply}), 200
    
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "api_key" in error_msg.lower() or "authentication" in error_msg.lower():
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."}), 401
        elif "timeout" in error_msg.lower():
            return jsonify({"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI."}), 504
        elif "rate_limit" in error_msg.lower():
            return jsonify({"error": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 429
        else:
            return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI: {error_msg}"}), 502

@app.errorhandler(404)
def not_found(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html –¥–ª—è SPA"""
    return app.send_static_file('index.html')

@app.errorhandler(500)
def internal_error(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    
    print("=" * 50)
    print(f"üöÄ AI Navigator –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üîë OpenAI API Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if OPENAI_KEY else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(
        host="0.0.0.0", 
        port=port, 
        debug=False  # –í production –≤—Å–µ–≥–¥–∞ False
    )
